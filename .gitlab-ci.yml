# TODO: try to clean up test runs by wrapping go test in a timeout & running
# the cleanup scripts.
# I think we'll need to pass in a name to the test runner, and then cleanup
# anything with that prefix...

variables:
    SERVER_NAME: dotmesh-server
    PROVISIONER_NAME: dotmesh-dynamic-provisioner

    RELEASE_DOCKER_REGISTRY: quay.io
    RELEASE_DOCKER_REPOSITORY: dotmesh
    CI_SERVICE_BEING_TESTED: dotmesh-server

    DOTMESH_TEST_CLEANUP: always
    DOTMESH_TEST_TIMEOUT: 10m

stages:
    - build
    - test
    - deploy_images
    - deploy
    - manual_deploy
    - notify

before_script:
    - mkdir -p gopath
    - export GOPATH=$(pwd)/gopath
    - cd gopath
    - mkdir -p src/github.com/dotmesh-io
    - ln -s `realpath ..` ./src/github.com/dotmesh-io/dotmesh
    - cd src/github.com/dotmesh-io/dotmesh
    - while [ -f /dotmesh-test-cleanup.lock ]; do echo "waiting for test cleanup..."; sleep 1; done

build_client_linux:
    retry: 2
    stage: build
    tags:
        - fast
    script:
        - mkdir -p target
        - CGO_ENABLED=0 go build -ldflags "-X main.clientVersion=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} -X main.dockerTag=${CI_COMMIT_TAG:-$CI_COMMIT_SHA} -s" -o target/dm ./cmd/dm
    artifacts:
        paths:
            - target
        expire_in: 1 week

build_client_macos:
    retry: 2
    stage: build
    tags:
        - fast
    script:
        - ./scripts/rebuild_client.sh Darwin
    artifacts:
        paths:
            - binaries
        expire_in: 1 week
    except:
    - schedules

build_yaml:
    retry: 2
    stage: build
    tags:
    - fast
    script:
    - (cd kubernetes && ./rebuild.sh)

build_operator:
    retry: 2
    stage: build
    tags:
        - fast
    script:
    - export DOCKER_TAG=${CI_COMMIT_TAG:-${CI_COMMIT_SHA:-latest}}
    - export VERSION=${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}
    - export REPOSITORY=${CI_REGISTRY}/${CI_PROJECT_PATH}
    - echo $VERSION
    - make gitlab_registry_login
    - make create_context
    - make build_operator
    - make push_operator

build_provisioner:
    retry: 2
    stage: build
    tags:
        - fast
    script:
    - export DOCKER_TAG=${CI_COMMIT_TAG:-${CI_COMMIT_SHA:-latest}}
    - export VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - export REPOSITORY=${CI_REGISTRY}/${CI_PROJECT_PATH}
    - make gitlab_registry_login
    - make create_context
    - make build_provisioner
    - make push_provisioner
    except:
    - schedules

build_server:
    retry: 2
    stage: build
    tags:
    - fast
    script:
    - export DOCKER_TAG=${CI_COMMIT_TAG:-${CI_COMMIT_SHA:-latest}}
    - export VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - export REPOSITORY=${CI_REGISTRY}/${CI_PROJECT_PATH}
    - make gitlab_registry_login
    - make create_context
    - make build_server
    - make build_dind_prov
    - make push_dind_prov
    - make push_server

dotmesh_unit_tests:
    stage: test
    tags:
        - fast
    script:
        - go test `go list ./... | egrep -v /tests`
    except:
        - schedules

versioner_unit_tests:
    stage: test
    tags:
        - fast
    script:
        - cd cmd/versioner && go test
    except:
        - schedules

# run full dind tests on linux
linux_default_dot:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestDefaultDot
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_dot_diff:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestDotDiff
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_boltdb:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestBoltDBStoreWithDefaultDot
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux__restart_boltdb:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestRecoverFromUnmountedDotOnMasterBoltDB
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_single_node:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestSingleNode
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_recover_from_unmounted_dot_on_master:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestRecoverFromUnmountedDotOnMaster
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_two_nodes_same_cluster:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestTwoNodesSameCluster
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

.linux_kubernetes_volumes:
    retry: 2
    stage: test
    dependencies:
        - build_yaml
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestKubernetesVolumes
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

.linux_kubernetes_operator_dynamic_provisioning:
    retry: 2
    stage: test
    dependencies:
        - build_yaml
        - build_client_linux
        - build_server
    tags:
        - fast
    script:
        - DOTMESH_TEST_TIMEOUT=15m ./test.sh -run TestKubernetesOperator/DynamicProvisioning
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

.linux_kubernetes_operator_PVC:
    retry: 2
    stage: test
    dependencies:
        - build_yaml
        - build_client_linux
        - build_server
    tags:
        - fast
    script:
        - ./test.sh -run TestKubernetesOperator/PVC*
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_deletion_simple:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestDeletionSimple
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_deletion_complex:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestDeletionComplex
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_backup_and_restore_two_single_node_clusters:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestBackupAndRestoreTwoSingleNodeClusters
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_two_single_node_clusters:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestTwoSingleNodeClusters
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_three_single_node_clusters:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestThreeSingleNodeClusters
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_two_double_node_clusters:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestTwoDoubleNodeClusters
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

.linux_s3remote:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestS3Remote
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_s3api:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestS3Api
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_forks:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - ./test.sh -run TestForks
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

# Test disabled while we rethink how it works (see comments in acceptance_test.go)
.linux_kubernetes_test_tooling:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:

        - fast
    script:
        - ./test.sh -run TestKubernetesTestTooling
    artifacts:
        paths:
        - extracted_logs
        when: always
    except:
        - schedules

linux_stress_lots_of_commits:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - DOTMESH_TEST_TIMEOUT=30m ./test.sh -timeout 30m -run TestStressLotsOfCommits
    artifacts:
        paths:
        - extracted_logs
        when: always
    when: manual
    except:
        - schedules

linux_stress_large_files:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - big-disk
        - fast
    script:
        - DOTMESH_TEST_TIMEOUT=30m ./test.sh -timeout 30m -run TestStressLargeFiles
    artifacts:
        paths:
        - extracted_logs
        when: always
    when: manual
    except:
        - schedules

linux_stress_handover:
    retry: 2
    stage: test
    dependencies:
        - build_client_linux
    tags:
        - fast
    script:
        - DOTMESH_TEST_TIMEOUT=30m ./test.sh -timeout 30m -run TestStressHandover
    artifacts:
        paths:
        - extracted_logs
        when: always
    when: manual
    except:
        - schedules

publish_images:
    stage: deploy_images
    dependencies:
        - build_client_linux
        - build_client_macos
        - build_server
        - build_yaml
    tags:

        - fast
    script:
        # push to quay.io, by re-tagging and pushing the images
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
        - docker login -u $QUAY_USER -p $QUAY_PASSWORD $RELEASE_DOCKER_REGISTRY
        - ./release-images.sh $RELEASE_DOCKER_REGISTRY $RELEASE_DOCKER_REPOSITORY
    except:
        - schedules

trigger_e2e_test:
    stage: deploy
    tags:

        - fast
    script:
        - echo - curl -X POST -F "token=$CI_JOB_TOKEN" -F "ref=master" -F "variables[CI_SERVICE_BEING_TESTED]=$CI_SERVICE_BEING_TESTED" -F "variables[CI_DOCKER_TAG]=$CI_DOCKER_TAG" -F "variables[DOTMESH_CI_BUILD_REF_NAME]=$CI_BUILD_REF_NAME" https://gitlab.dotmesh.com/api/v4/projects/dotmesh%2Fe2e-sync/trigger/pipeline
        - curl -X POST -F "token=$CI_JOB_TOKEN" -F "ref=master" -F "variables[CI_SERVICE_BEING_TESTED]=$CI_SERVICE_BEING_TESTED" -F "variables[CI_DOCKER_TAG]=$CI_DOCKER_TAG" -F "variables[DOTMESH_CI_BUILD_REF_NAME]=$CI_BUILD_REF_NAME" https://gitlab.dotmesh.com/api/v4/projects/dotmesh%2Fe2e-sync/trigger/pipeline
    only:
        - master
    except:
        - schedules

deploy_unstable_build:
    stage: deploy
    dependencies:
        - build_client_linux
        - build_client_macos
        - build_yaml
        - publish_images
    tags:
        - fast
    script:
        - "ssh -o UserKnownHostsFile=./release-hosts releases@get.dotmesh.io mkdir -p /pool/releases/unstable/$CI_COMMIT_REF_NAME"
        - "rsync -e 'ssh -o UserKnownHostsFile=./release-hosts' -avz binaries/{Linux,Darwin} yaml releases@get.dotmesh.io:/pool/releases/unstable/$CI_COMMIT_REF_NAME"
        - "echo \"Deployed to https://get.dotmesh.io/unstable/$CI_COMMIT_REF_NAME\""
    except:
        - /^release-.*$/
        - schedules

deploy_release_build:
    stage: deploy
    dependencies:
        - build_client_linux
        - build_client_macos
        - build_yaml
        - publish_images
    tags:
        - fast
    script:
        - VERSION=`cd cmd/versioner; go run versioner.go`; echo VERSION=$VERSION
        - "ssh -o UserKnownHostsFile=./release-hosts releases@get.dotmesh.io mkdir -p /pool/releases/$VERSION"
        - "rsync -e 'ssh -o UserKnownHostsFile=./release-hosts' -avz binaries/{Linux,Darwin} yaml releases@get.dotmesh.io:/pool/releases/$VERSION"
    only:
        - /^release-.*$/
    except:
        - schedules

mark_release_as_stable:
  stage: manual_deploy
  script:
    - VERSION=`cd cmd/versioner; go run versioner.go`
    - "ssh -o UserKnownHostsFile=./release-hosts releases@get.dotmesh.io sh -c \"true && rm -f /pool/releases/Linux && ln -s $VERSION/Linux /pool/releases && rm -f /pool/releases/Darwin && ln -s $VERSION/Darwin /pool/releases && rm -f /pool/releases/yaml && ln -fs $VERSION/yaml /pool/releases\""
  only:
    - /^release-.*$/
  when: manual
  except:
    - schedules
