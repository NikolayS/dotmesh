// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/zfs/zfs.go

// Package mock_zfs is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	types "github.com/dotmesh-io/dotmesh/pkg/types"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockZFS is a mock of ZFS interface
type MockZFS struct {
	ctrl     *gomock.Controller
	recorder *MockZFSMockRecorder
}

// MockZFSMockRecorder is the mock recorder for MockZFS
type MockZFSMockRecorder struct {
	mock *MockZFS
}

// NewMockZFS creates a new mock instance
func NewMockZFS(ctrl *gomock.Controller) *MockZFS {
	mock := &MockZFS{ctrl: ctrl}
	mock.recorder = &MockZFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZFS) EXPECT() *MockZFSMockRecorder {
	return m.recorder
}

// GetPoolID mocks base method
func (m *MockZFS) GetPoolID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPoolID indicates an expected call of GetPoolID
func (mr *MockZFSMockRecorder) GetPoolID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolID", reflect.TypeOf((*MockZFS)(nil).GetPoolID))
}

// GetZPoolCapacity mocks base method
func (m *MockZFS) GetZPoolCapacity() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZPoolCapacity")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZPoolCapacity indicates an expected call of GetZPoolCapacity
func (mr *MockZFSMockRecorder) GetZPoolCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZPoolCapacity", reflect.TypeOf((*MockZFS)(nil).GetZPoolCapacity))
}

// ReportZpoolCapacity mocks base method
func (m *MockZFS) ReportZpoolCapacity() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportZpoolCapacity")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportZpoolCapacity indicates an expected call of ReportZpoolCapacity
func (mr *MockZFSMockRecorder) ReportZpoolCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportZpoolCapacity", reflect.TypeOf((*MockZFS)(nil).ReportZpoolCapacity))
}

// FindFilesystemIdsOnSystem mocks base method
func (m *MockZFS) FindFilesystemIdsOnSystem() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilesystemIdsOnSystem")
	ret0, _ := ret[0].([]string)
	return ret0
}

// FindFilesystemIdsOnSystem indicates an expected call of FindFilesystemIdsOnSystem
func (mr *MockZFSMockRecorder) FindFilesystemIdsOnSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilesystemIdsOnSystem", reflect.TypeOf((*MockZFS)(nil).FindFilesystemIdsOnSystem))
}

// DeleteFilesystemInZFS mocks base method
func (m *MockZFS) DeleteFilesystemInZFS(fs string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesystemInZFS", fs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilesystemInZFS indicates an expected call of DeleteFilesystemInZFS
func (mr *MockZFSMockRecorder) DeleteFilesystemInZFS(fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystemInZFS", reflect.TypeOf((*MockZFS)(nil).DeleteFilesystemInZFS), fs)
}

// GetDirtyDelta mocks base method
func (m *MockZFS) GetDirtyDelta(filesystemId, latestSnap string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirtyDelta", filesystemId, latestSnap)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDirtyDelta indicates an expected call of GetDirtyDelta
func (mr *MockZFSMockRecorder) GetDirtyDelta(filesystemId, latestSnap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirtyDelta", reflect.TypeOf((*MockZFS)(nil).GetDirtyDelta), filesystemId, latestSnap)
}

// Snapshot mocks base method
func (m *MockZFS) Snapshot(filesystemId, snapshotId string, meta []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", filesystemId, snapshotId, meta)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockZFSMockRecorder) Snapshot(filesystemId, snapshotId, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockZFS)(nil).Snapshot), filesystemId, snapshotId, meta)
}

// List mocks base method
func (m *MockZFS) List(filesystemId, snapshotId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", filesystemId, snapshotId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockZFSMockRecorder) List(filesystemId, snapshotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockZFS)(nil).List), filesystemId, snapshotId)
}

// FQ mocks base method
func (m *MockZFS) FQ(filesystemId string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FQ", filesystemId)
	ret0, _ := ret[0].(string)
	return ret0
}

// FQ indicates an expected call of FQ
func (mr *MockZFSMockRecorder) FQ(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FQ", reflect.TypeOf((*MockZFS)(nil).FQ), filesystemId)
}

// DiscoverSystem mocks base method
func (m *MockZFS) DiscoverSystem(fs string) (*types.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverSystem", fs)
	ret0, _ := ret[0].(*types.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverSystem indicates an expected call of DiscoverSystem
func (mr *MockZFSMockRecorder) DiscoverSystem(fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverSystem", reflect.TypeOf((*MockZFS)(nil).DiscoverSystem), fs)
}

// StashBranch mocks base method
func (m *MockZFS) StashBranch(existingFs, newFs, rollbackTo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashBranch", existingFs, newFs, rollbackTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// StashBranch indicates an expected call of StashBranch
func (mr *MockZFSMockRecorder) StashBranch(existingFs, newFs, rollbackTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashBranch", reflect.TypeOf((*MockZFS)(nil).StashBranch), existingFs, newFs, rollbackTo)
}

// PredictSize mocks base method
func (m *MockZFS) PredictSize(fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredictSize", fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictSize indicates an expected call of PredictSize
func (mr *MockZFSMockRecorder) PredictSize(fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictSize", reflect.TypeOf((*MockZFS)(nil).PredictSize), fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId)
}

// Clone mocks base method
func (m *MockZFS) Clone(filesystemId, originSnapshotId, newCloneFilesystemId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", filesystemId, originSnapshotId, newCloneFilesystemId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *MockZFSMockRecorder) Clone(filesystemId, originSnapshotId, newCloneFilesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockZFS)(nil).Clone), filesystemId, originSnapshotId, newCloneFilesystemId)
}

// Rollback mocks base method
func (m *MockZFS) Rollback(filesystemId, snapshotId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", filesystemId, snapshotId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback
func (mr *MockZFSMockRecorder) Rollback(filesystemId, snapshotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockZFS)(nil).Rollback), filesystemId, snapshotId)
}

// Create mocks base method
func (m *MockZFS) Create(filesystemId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", filesystemId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockZFSMockRecorder) Create(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZFS)(nil).Create), filesystemId)
}

// Recv mocks base method
func (m *MockZFS) Recv(pipeReader *io.PipeReader, toFilesystemId string, errBuffer *bytes.Buffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", pipeReader, toFilesystemId, errBuffer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recv indicates an expected call of Recv
func (mr *MockZFSMockRecorder) Recv(pipeReader, toFilesystemId, errBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockZFS)(nil).Recv), pipeReader, toFilesystemId, errBuffer)
}

// ApplyPrelude mocks base method
func (m *MockZFS) ApplyPrelude(prelude types.Prelude, fs string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPrelude", prelude, fs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyPrelude indicates an expected call of ApplyPrelude
func (mr *MockZFSMockRecorder) ApplyPrelude(prelude, fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPrelude", reflect.TypeOf((*MockZFS)(nil).ApplyPrelude), prelude, fs)
}

// Send mocks base method
func (m *MockZFS) Send(fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId string, preludeEncoded []byte) (*io.PipeReader, chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId, preludeEncoded)
	ret0, _ := ret[0].(*io.PipeReader)
	ret1, _ := ret[1].(chan error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockZFSMockRecorder) Send(fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId, preludeEncoded interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockZFS)(nil).Send), fromFilesystemId, fromSnapshotId, toFilesystemId, toSnapshotId, preludeEncoded)
}

// SetCanmount mocks base method
func (m *MockZFS) SetCanmount(filesystemId, snapshotId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCanmount", filesystemId, snapshotId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCanmount indicates an expected call of SetCanmount
func (mr *MockZFSMockRecorder) SetCanmount(filesystemId, snapshotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCanmount", reflect.TypeOf((*MockZFS)(nil).SetCanmount), filesystemId, snapshotId)
}

// Mount mocks base method
func (m *MockZFS) Mount(filesystemId, snapshotId, options, mountPath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", filesystemId, snapshotId, options, mountPath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mount indicates an expected call of Mount
func (mr *MockZFSMockRecorder) Mount(filesystemId, snapshotId, options, mountPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockZFS)(nil).Mount), filesystemId, snapshotId, options, mountPath)
}

// Fork mocks base method
func (m *MockZFS) Fork(filesystemId, latestSnapshot, forkFilesystemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fork", filesystemId, latestSnapshot, forkFilesystemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fork indicates an expected call of Fork
func (mr *MockZFSMockRecorder) Fork(filesystemId, latestSnapshot, forkFilesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockZFS)(nil).Fork), filesystemId, latestSnapshot, forkFilesystemId)
}
