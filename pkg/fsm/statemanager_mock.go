// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/fsm/types.go

// Package mock_fsm is a generated GoMock package.
package fsm

import (
	types "github.com/dotmesh-io/dotmesh/pkg/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStateManager is a mock of StateManager interface
type MockStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockStateManagerMockRecorder
}

// MockStateManagerMockRecorder is the mock recorder for MockStateManager
type MockStateManagerMockRecorder struct {
	mock *MockStateManager
}

// NewMockStateManager creates a new mock instance
func NewMockStateManager(ctrl *gomock.Controller) *MockStateManager {
	mock := &MockStateManager{ctrl: ctrl}
	mock.recorder = &MockStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateManager) EXPECT() *MockStateManagerMockRecorder {
	return m.recorder
}

// InitFilesystemMachine mocks base method
func (m *MockStateManager) InitFilesystemMachine(filesystemId string) (FSM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitFilesystemMachine", filesystemId)
	ret0, _ := ret[0].(FSM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitFilesystemMachine indicates an expected call of InitFilesystemMachine
func (mr *MockStateManagerMockRecorder) InitFilesystemMachine(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitFilesystemMachine", reflect.TypeOf((*MockStateManager)(nil).InitFilesystemMachine), filesystemId)
}

// GetFilesystemMachine mocks base method
func (m *MockStateManager) GetFilesystemMachine(filesystemId string) (FSM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemMachine", filesystemId)
	ret0, _ := ret[0].(FSM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemMachine indicates an expected call of GetFilesystemMachine
func (mr *MockStateManagerMockRecorder) GetFilesystemMachine(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemMachine", reflect.TypeOf((*MockStateManager)(nil).GetFilesystemMachine), filesystemId)
}

// AlignMountStateWithMasters mocks base method
func (m *MockStateManager) AlignMountStateWithMasters(filesystemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlignMountStateWithMasters", filesystemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlignMountStateWithMasters indicates an expected call of AlignMountStateWithMasters
func (mr *MockStateManagerMockRecorder) AlignMountStateWithMasters(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlignMountStateWithMasters", reflect.TypeOf((*MockStateManager)(nil).AlignMountStateWithMasters), filesystemId)
}

// ActivateClone mocks base method
func (m *MockStateManager) ActivateClone(topLevelFilesystemId, originFilesystemId, originSnapshotId, newCloneFilesystemId, newBranchName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateClone", topLevelFilesystemId, originFilesystemId, originSnapshotId, newCloneFilesystemId, newBranchName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateClone indicates an expected call of ActivateClone
func (mr *MockStateManagerMockRecorder) ActivateClone(topLevelFilesystemId, originFilesystemId, originSnapshotId, newCloneFilesystemId, newBranchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateClone", reflect.TypeOf((*MockStateManager)(nil).ActivateClone), topLevelFilesystemId, originFilesystemId, originSnapshotId, newCloneFilesystemId, newBranchName)
}

// DeleteFilesystem mocks base method
func (m *MockStateManager) DeleteFilesystem(filesystemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesystem", filesystemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilesystem indicates an expected call of DeleteFilesystem
func (mr *MockStateManagerMockRecorder) DeleteFilesystem(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystem", reflect.TypeOf((*MockStateManager)(nil).DeleteFilesystem), filesystemId)
}

// DeleteFilesystemFromMap mocks base method
func (m *MockStateManager) DeleteFilesystemFromMap(filesystemId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFilesystemFromMap", filesystemId)
}

// DeleteFilesystemFromMap indicates an expected call of DeleteFilesystemFromMap
func (mr *MockStateManagerMockRecorder) DeleteFilesystemFromMap(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystemFromMap", reflect.TypeOf((*MockStateManager)(nil).DeleteFilesystemFromMap), filesystemId)
}

// NodeID mocks base method
func (m *MockStateManager) NodeID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeID indicates an expected call of NodeID
func (mr *MockStateManagerMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockStateManager)(nil).NodeID))
}

// UpdateSnapshotsFromKnownState mocks base method
func (m *MockStateManager) UpdateSnapshotsFromKnownState(server, filesystem string, snapshots []*types.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotsFromKnownState", server, filesystem, snapshots)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshotsFromKnownState indicates an expected call of UpdateSnapshotsFromKnownState
func (mr *MockStateManagerMockRecorder) UpdateSnapshotsFromKnownState(server, filesystem, snapshots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotsFromKnownState", reflect.TypeOf((*MockStateManager)(nil).UpdateSnapshotsFromKnownState), server, filesystem, snapshots)
}

// SnapshotsFor mocks base method
func (m *MockStateManager) SnapshotsFor(server, filesystemId string) ([]types.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotsFor", server, filesystemId)
	ret0, _ := ret[0].([]types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotsFor indicates an expected call of SnapshotsFor
func (mr *MockStateManagerMockRecorder) SnapshotsFor(server, filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotsFor", reflect.TypeOf((*MockStateManager)(nil).SnapshotsFor), server, filesystemId)
}

// SnapshotsForCurrentMaster mocks base method
func (m *MockStateManager) SnapshotsForCurrentMaster(filesystemId string) ([]types.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotsForCurrentMaster", filesystemId)
	ret0, _ := ret[0].([]types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotsForCurrentMaster indicates an expected call of SnapshotsForCurrentMaster
func (mr *MockStateManagerMockRecorder) SnapshotsForCurrentMaster(filesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotsForCurrentMaster", reflect.TypeOf((*MockStateManager)(nil).SnapshotsForCurrentMaster), filesystemId)
}

// AddressesForServer mocks base method
func (m *MockStateManager) AddressesForServer(server string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressesForServer", server)
	ret0, _ := ret[0].([]string)
	return ret0
}

// AddressesForServer indicates an expected call of AddressesForServer
func (mr *MockStateManagerMockRecorder) AddressesForServer(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressesForServer", reflect.TypeOf((*MockStateManager)(nil).AddressesForServer), server)
}

// RegisterNewFork mocks base method
func (m *MockStateManager) RegisterNewFork(originFilesystemId, originSnapshotId, forkNamespace, forkName, forkFilesystemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewFork", originFilesystemId, originSnapshotId, forkNamespace, forkName, forkFilesystemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterNewFork indicates an expected call of RegisterNewFork
func (mr *MockStateManagerMockRecorder) RegisterNewFork(originFilesystemId, originSnapshotId, forkNamespace, forkName, forkFilesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewFork", reflect.TypeOf((*MockStateManager)(nil).RegisterNewFork), originFilesystemId, originSnapshotId, forkNamespace, forkName, forkFilesystemId)
}

// MarkFilesystemAsLiveInEtcd mocks base method
func (m *MockStateManager) MarkFilesystemAsLiveInEtcd(topLevelFilesystemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFilesystemAsLiveInEtcd", topLevelFilesystemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFilesystemAsLiveInEtcd indicates an expected call of MarkFilesystemAsLiveInEtcd
func (mr *MockStateManagerMockRecorder) MarkFilesystemAsLiveInEtcd(topLevelFilesystemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFilesystemAsLiveInEtcd", reflect.TypeOf((*MockStateManager)(nil).MarkFilesystemAsLiveInEtcd), topLevelFilesystemId)
}
