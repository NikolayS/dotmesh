// generated by jsonenums -type=FileChange; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

var (
	_FileChangeNameToValue = map[string]FileChange{
		"FileChangeUnknown":  FileChangeUnknown,
		"FileChangeAdded":    FileChangeAdded,
		"FileChangeModified": FileChangeModified,
		"FileChangeRemoved":  FileChangeRemoved,
		"FileChangeRenamed":  FileChangeRenamed,
	}

	_FileChangeValueToName = map[FileChange]string{
		FileChangeUnknown:  "FileChangeUnknown",
		FileChangeAdded:    "FileChangeAdded",
		FileChangeModified: "FileChangeModified",
		FileChangeRemoved:  "FileChangeRemoved",
		FileChangeRenamed:  "FileChangeRenamed",
	}
)

func init() {
	var v FileChange
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FileChangeNameToValue = map[string]FileChange{
			interface{}(FileChangeUnknown).(fmt.Stringer).String():  FileChangeUnknown,
			interface{}(FileChangeAdded).(fmt.Stringer).String():    FileChangeAdded,
			interface{}(FileChangeModified).(fmt.Stringer).String(): FileChangeModified,
			interface{}(FileChangeRemoved).(fmt.Stringer).String():  FileChangeRemoved,
			interface{}(FileChangeRenamed).(fmt.Stringer).String():  FileChangeRenamed,
		}
	}
}

// MarshalJSON is generated so FileChange satisfies json.Marshaler.
func (r FileChange) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FileChangeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FileChange: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FileChange satisfies json.Unmarshaler.
func (r *FileChange) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FileChange should be a string, got %s", data)
	}
	v, ok := _FileChangeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FileChange %q", s)
	}
	*r = v
	return nil
}
